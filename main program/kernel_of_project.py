import argparse
import queue
import sys
import numpy as np
import soundcard as sc
import threading
from vosk import Model, KaldiRecognizer
import json
import argostranslate.package
import argostranslate.translate
import warnings
from soundcard.mediafoundation import SoundcardRuntimeWarning
import os

# –ó–º—ñ–Ω—é—î–º–æ —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü—ñ—ó, —â–æ–± –≤–æ–Ω–∞ –ø—Ä–∏–π–º–∞–ª–∞ from_lang —Ç–∞ to_lang
def start_translation(stop_event, from_lang="en", to_lang="uk", callback=None):
    # –Ü–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ soundcard
    warnings.filterwarnings("ignore", category=SoundcardRuntimeWarning)

    # –ö–æ–¥–∏ –º–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É —Ç–µ–ø–µ—Ä –±–µ—Ä—É—Ç—å—Å—è –∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ —Ñ—É–Ω–∫—Ü—ñ—ó
    from_code = from_lang
    to_code = to_lang

    # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞–∫–µ—Ç—É –º–æ–≤
    def install_language_package(src_code, dest_code):
        print(f"–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–∞–∫–µ—Ç –¥–ª—è {src_code} -> {dest_code}...")
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–∞–∫–µ—Ç
            # –ó–∞–º—ñ—Å—Ç—å —ñ—Ç–µ—Ä–∞—Ü—ñ—ó –ø–æ lang.translations, –º–∏ —Ç–µ–ø–µ—Ä –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ
            # —á–∏ —Ñ—É–Ω–∫—Ü—ñ—è translate –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ —Ü—ñ—î—é –ø–∞—Ä–æ—é –º–æ–≤
            # –∞–±–æ —á–∏ –ø–∞–∫–µ—Ç –≤–∂–µ —î –≤ installed_languages.
            # –ë—ñ–ª—å—à –Ω–∞–¥—ñ–π–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ø–∞–∫–µ—Ç–∞:
            installed_packages = argostranslate.package.get_installed_packages()
            package_found = False
            for p in installed_packages:
                if p.from_code == src_code and p.to_code == dest_code:
                    package_found = True
                    print(f"–ü–∞–∫–µ—Ç {src_code} -> {dest_code} –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
                    break

            if not package_found:
                # –Ø–∫—â–æ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –æ–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω–¥–µ–∫—Å —Ç–∞ —à—É–∫–∞—î–º–æ –ø–∞–∫–µ—Ç
                argostranslate.package.update_package_index()
                available_packages = argostranslate.package.get_available_packages()
                package_to_install = next(
                    filter(lambda x: x.from_code == src_code and x.to_code == dest_code, available_packages), None
                )

                if package_to_install:
                    print(f"–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–∞–∫–µ—Ç {src_code} -> {dest_code}...")
                    argostranslate.package.install_from_path(package_to_install.download())
                    print(f"–ü–∞–∫–µ—Ç {src_code} -> {dest_code} —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
                else:
                    print(f"‚ùå –ü–∞–∫–µ—Ç –¥–ª—è {src_code} -> {dest_code} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–µ—Ä–µ–¥ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–¥–∏ –º–æ–≤.")
                    raise ValueError(f"–ü–∞–∫–µ—Ç –ø–µ—Ä–µ–∫–ª–∞–¥—É –¥–ª—è {src_code} -> {dest_code} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–∞–∫–µ—Ç–∞ {src_code} -> {dest_code}: {e}")
            raise # –ü–µ—Ä–µ–≤–∏–∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, —â–æ–± –≤–æ–Ω–∞ –±—É–ª–∞ –ø–æ–º—ñ—Ç–Ω–∞

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–∞–∫–µ—Ç –¥–ª—è –æ–±—Ä–∞–Ω–∏—Ö –º–æ–≤
    install_language_package(from_code, to_code)


    # –ß–µ—Ä–≥–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –∞—É–¥—ñ–æ-–¥–∞–Ω–∏—Ö –º—ñ–∂ –ø–æ—Ç–æ–∫–∞–º–∏
    q = queue.Queue()

    # –ê–Ω–∞–ª—ñ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ (–¥–ª—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –≤–∫–∞–∑–∞—Ç–∏ –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É) - –∑–∞–ª–∏—à–∞—î–º–æ –¥–ª—è Vosk
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument("-m", "--model", type=str, help="Vosk language model (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: en-us, ru)")
    args, _ = parser.parse_known_args()

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è loopback-–ø—Ä–∏—Å—Ç—Ä–æ—é –¥–ª—è –∑–∞–ø–∏—Å—É —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫—É
    default_speaker_name = sc.default_speaker().name
    loopback = next((m for m in sc.all_microphones(include_loopback=True)
                     if m.isloopback and default_speaker_name in m.name), None)
    print("üîç –ú—ñ–∫—Ä–æ—Ñ–æ–Ω–∏:")
    for mic in sc.all_microphones(include_loopback=True):
        print(f"  - {mic.name} (loopback: {mic.isloopback})")

    if not loopback:
        raise RuntimeError("‚ùå Loopback-–ø—Ä–∏—Å—Ç—Ä—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä, —á–∏ —î –∞—É–¥—ñ–æ –≤–∏—Ö—ñ–¥ –∑ –¥–∏–Ω–∞–º—ñ–∫—ñ–≤.")

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞—É–¥—ñ–æ
    samplerate = 16000
    channels = 1
    blocksize = 8000

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ Vosk
    # –í–∞–∂–ª–∏–≤–æ: Vosk –º–æ–¥–µ–ª—ñ –º–∞—é—Ç—å —Å–≤–æ—ó —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –∫–æ–¥–∏ –º–æ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "en-us"),
    # —è–∫—ñ –º–æ–∂—É—Ç—å –≤—ñ–¥—Ä—ñ–∑–Ω—è—Ç–∏—Å—è –≤—ñ–¥ –∫–æ–¥—ñ–≤ ArgoTranslate ("en").
    # –í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –∑—ñ—Å—Ç–∞–≤–∏—Ç–∏ —ó—Ö –∞–±–æ –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –≤–∏–±–∏—Ä–∞—Ç–∏ –æ–∫—Ä–µ–º–æ Vosk –º–æ–¥–µ–ª—å.
    vosk_model_lang = from_code
    if from_code == "en":
        vosk_model_lang = "en-us"
    elif from_code == "uk":
        vosk_model_lang = "uk"
    elif from_code == "pl":
        vosk_model_lang = "pl" # –Ø–∫—â–æ —î –ø–æ–ª—å—Å—å–∫–∞ –º–æ–¥–µ–ª—å Vosk
    elif from_code == "es":
        vosk_model_lang = "es" # –Ø–∫—â–æ —î —ñ—Å–ø–∞–Ω—Å—å–∫–∞ –º–æ–¥–µ–ª—å Vosk
    elif from_code == "zh":
        vosk_model_lang = "zh" # –Ø–∫—â–æ —î –∫–∏—Ç–∞–π—Å—å–∫–∞ –º–æ–¥–µ–ª—å Vosk
    else:
        print(f"–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –î–ª—è –º–æ–≤–∏ '{from_code}' –Ω–µ–º–∞—î –ø—Ä—è–º–æ–≥–æ –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –∑ –º–æ–¥–µ–ª–ª—é Vosk. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ '{from_code}' —è–∫ —î.")

    try:
        model = Model(lang=vosk_model_lang)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ Vosk –¥–ª—è –º–æ–≤–∏ '{vosk_model_lang}': {e}")
        print("–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∏ –≤—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –º–æ–¥–µ–ª—å Vosk.")
        print("–ù–∞–ø—Ä–∏–∫–ª–∞–¥, –¥–ª—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó: pip install vosk; –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó: https://alphacephei.com/vosk/models")
        sys.exit(1)


    rec = KaldiRecognizer(model, samplerate)

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤, —è–∫—â–æ —ó—ó —â–µ –Ω–µ–º–∞—î
    os.makedirs("output", exist_ok=True)

    # –ü–æ—Ç—ñ–∫ –¥–ª—è –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫—É
    def loopback_stream():
        print("üéß –°–ª—É—Ö–∞—é —Å–∏—Å—Ç–µ–º–Ω–∏–π –∑–≤—É–∫...")
        with loopback.recorder(samplerate=samplerate, channels=channels, blocksize=blocksize) as mic:
            while not stop_event.is_set():
                data = mic.record(numframes=blocksize)
                data_bytes = (data * 32767).astype(np.int16).tobytes()
                q.put(data_bytes)

    threading.Thread(target=loopback_stream, daemon=True).start()

    # –ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É
    try:
        while not stop_event.is_set():
            try:
                data = q.get(timeout=1)
            except queue.Empty:
                continue

            if rec.AcceptWaveform(data):
                result_json = json.loads(rec.Result())
                recognized_text = result_json.get("text", "").strip()
                if recognized_text:
                    translated_text = argostranslate.translate.translate(recognized_text, from_code, to_code)

                    print(f"\n{from_code.upper()}: {recognized_text}")
                    print(f"{to_code.upper()}: {translated_text}\n")

                    if callback:
                        callback(translated_text) # –í–ò–ö–õ–ò–ö `callback` –¢–Ü–õ–¨–ö–ò –î–õ–Ø –ü–û–í–ù–ò–• –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í

                    with open(f"output/{from_code}_output.txt", "a", encoding="utf-8") as f:
                        f.write(f"{recognized_text}\n")

                    with open(f"output/{to_code}_output.txt", "a", encoding="utf-8") as f:
                        f.write(f"{translated_text}\n")

            else:
                partial_text = json.loads(rec.PartialResult())["partial"]
                if partial_text:
                    partial_translate = argostranslate.translate.translate(partial_text, from_code, to_code)
                    sys.stdout.write('\r' + partial_translate + ' ' * 20)
                    sys.stdout.flush()

    except KeyboardInterrupt:
        print("\n‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –¢–µ–∫—Å—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ø–∞–ø—Ü—ñ output.")
    except Exception as e:
        print(f"\n‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –ø–µ—Ä–µ–∫–ª–∞–¥—É: {e}")
        stop_event.set()